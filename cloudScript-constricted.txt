function generateFailObj(a,b){return{Result:"Failed",Message:a,Data:b}}function generateErrObj(a,b){return{Result:"Error",Message:a,Data:b}}function loadTitleDataJson(a){var b=server.GetTitleData({PlayFabId:currentPlayerId,Keys:[a]});if(void 0==b||void 0==b.Data||void 0==b.Data[a])return null;a=JSON.parse(b.Data[a]);return void 0==a?null:a}function getServerTime(){return Math.floor((new Date).getTime()/1E3)}
function randomRange(a,b){return Math.round(Math.random()*(Number(b)-Number(a)))+Number(a)}function addCurrency(a,b){server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:b})}
function payCurrency(a,b,c){var d=server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency;if(void 0!=a&&null!=a&&a>d.SC||void 0!=b&&null!=b&&b>d.HC||void 0!=c&&null!=c&&c>d.TK)return null;void 0!=a&&null!=a&&0<Number(a)&&(server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:a}),d.SC-=a);void 0!=b&&null!=b&&0<Number(b)&&(server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:b}),d.HC-=b);void 0!=c&&null!=c&&0<Number(c)&&
(server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"TK",Amount:c}),d.HC-=c);return d}
function addExperience(a){var b=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LevelProgress"]}),c={};if(void 0!=b.Data.LevelProgress&&null!=b.Data.LevelProgress){if(c=JSON.parse(b.Data.LevelProgress.Value),void 0==c||null==c)return null}else c.Experience=0,c.Level=0,c.LastLevelReward=0;c.Experience=Number(c.Experience)+Number(a);a=loadTitleDataJson("Balancing_PlayerLevels");if(void 0==a||null==a||0==a.length)return null;for(var d=b=0;d<a.length&&!(b=d,c.Experience<Number(a[d].Threshold));d++);
c.Level=b;server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{LevelProgress:JSON.stringify(c)}});return c}function loadCamelsData(){var a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["Camels"]});if(void 0==a.Data.Camels||null==a.Data.Camels)return null;a=JSON.parse(a.Data.Camels.Value);return void 0==a||null==a?null:a}
function createEmptyCamelProfile(a){var b={Name:"CamelName",Quality:0,BaseAcc:0,BaseSpeed:0,BaseGallop:0,BaseStamina:0,CurrentAcc:0,CurrentSpeed:0,CurrentGallop:0,CurrentStamina:0,HeadGear:0,Robot:0,Whip:0,Robe:0,Bridle:0,SteroidsLeft:0,AccTrained:0,SpeedTrained:0,GallopTrained:0,StaminaTrained:0,CurrentTrainingType:"none",TrainingEnds:0,CamelValue:0,BreedingCompletionTimestamp:0};void 0!=a.BaseAcc&&null!=a.BaseAcc&&(b.BaseAcc=a.BaseAcc,b.CurrentAcc=a.BaseAcc);void 0!=a.BaseSpeed&&null!=a.BaseSpeed&&
(b.BaseSpeed=a.BaseSpeed,b.CurrentSpeed=a.BaseSpeed);void 0!=a.BaseGallop&&null!=a.BaseGallop&&(b.BaseGallop=a.BaseGallop,b.CurrentGallop=a.BaseGallop);void 0!=a.BaseStamina&&null!=a.BaseStamina&&(b.BaseStamina=a.BaseStamina,b.CurrentStamina=a.BaseStamina);return b}
handlers.breedCamel=function(a,b){var c=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["Camels","BreedingCandidates"]});if(void 0==c.Data.Camels||null==c.Data.Camels)return generateErrObj("Player's 'Camels' object was not found");b=JSON.parse(c.Data.Camels.Value);var d=b.OwnedCamelsList[a.camelIndex];if(void 0==d||null==d)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");if(Number(b.OwnedCamelsList.length)>=Number(loadTitleDataJson("MaxCamelSlots")))return generateFailObj("Number of owned camels reached max limit");
if(void 0==c.Data.BreedingCandidates||null==c.Data.BreedingCandidates)return generateErrObj("Player's breeding candidates not found");c=JSON.parse(c.Data.BreedingCandidates.Value);if(void 0==c||null==c||void 0==c.CandidateList||null==c.CandidateList||c.CandidateList.length<=Number(a.candidateIndex)||void 0==c.CandidateList[Number(a.candidateIndex)]||null==c.CandidateList[Number(a.candidateIndex)])return generateErrObj("Breeding candidate of index"+a.candidateIndex+" not found");var e=c.CandidateList[Number(a.candidateIndex)];
if(0==e.Available)return generateFailObj("Selected candidate is not available");a=payCurrency(e.CostSC,e.CostHC);if(null==a)return generateFailObj("Can't afford breeding");var f=Number(0);null!=g&&void 0!=g.Level&&null!=g.Level&&(f=Number(g.Level));g={BaseAcc:randomRange(d.CurrentAcc,e.Acceleration)+f,BaseSpeed:randomRange(d.CurrentSpeed,e.Speed)+f,BaseGallop:randomRange(d.CurrentGallop,e.Gallop)+f,BaseStamina:randomRange(d.CurrentStamina,e.Stamina)+f};f=createEmptyCamelProfile(g);f.Quality=Math.floor(Number(d.Quality)+
Number(e.Quality));f.BreedingCompletionTimestamp=getServerTime()+3600*Number(e.WaitTimeHours);b.OwnedCamelsList.push(f);e.Available=!1;server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{Camels:JSON.stringify(b),BreedingCandidates:JSON.stringify(c)}});var g=null;b=loadTitleDataJson("Balancing_Breeding");void 0!=b&&null!=b&&void 0!=b.ExpGain&&null!=b.ExpGain&&b.ExpGain.length>f.Quality&&(g=addExperience(Number(b.ExpGain[f.Quality])));return{Result:"OK",NewCamelProfile:f,VirtualCurrency:a,
LevelProgress:g}};
handlers.getBreedingCandidates=function(a,b){a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["BreedingCandidates"]});b={};void 0!=a.Data.BreedingCandidates&&null!=a.Data.BreedingCandidates&&(b=JSON.parse(a.Data.BreedingCandidates.Value));if(void 0==b||null==b||void 0==b.ExpirationTimestamp||null==b.ExpirationTimestamp||Number(b.ExpirationTimestamp)<=getServerTime())b=GenerateBreedingCandidates();return void 0==b||null==b?generateErrObj("Something went wrong"):{Result:"OK",BreedingCandidatesData:b}};
function GenerateBreedingCandidates(){var a=loadTitleDataJson("Balancing_Breeding");if(void 0==a||null==a||void 0==a.CandidatesResetTimeHours||null==a.CandidatesResetTimeHours||void 0==a.BreedingCandidates||null==a.BreedingCandidates||0==a.BreedingCandidates.length)return null;var b={};b.ExpirationTimestamp=getServerTime()+Number(a.CandidatesResetTimeHours)*Number(3600);b.CandidateList=[];for(var c=0;c<a.BreedingCandidates.length;c++){var d={Available:!0};d.Quality=a.BreedingCandidates[c].Quality;
d.CostSC=a.BreedingCandidates[c].CostSC;d.CostHC=a.BreedingCandidates[c].CostHC;for(var e=Number(0),f=Number(0),g=Number(0),h=Number(0),k=Number(a.BreedingCandidates[c].TotalStats),m=0;m<k;m++){var l=Math.random()*Number(4);l<Number(1)?e++:l<Number(2)?f++:l<Number(3)?g++:h++}d.Acceleration=e;d.Speed=f;d.Gallop=g;d.Stamina=h;d.WaitTimeHours=a.BreedingCandidates[c].WaitTimeHours;b.CandidateList.push(d)}server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{BreedingCandidates:JSON.stringify(b)}});
return b}
handlers.pickStartingCamel=function(a,b){b=loadCamelsData();null==b&&(b={});if(void 0!=b.OwnedCamelsList&&null!=b.OwnedCamelsList&&0<b.OwnedCamelsList.length&&(void 0!=b.OwnedCamelsList[0].name||null!=b[0].OwnedCamelsList.name))return generateFailObj("Player already owns a camel");b.SelectedCamel=0;var c=Number(0);void 0==a.baseAcc||null==a.baseAcc||isNaN(Number(a.baseAcc))||(c=a.baseAcc);var d=Number(0);void 0==a.baseSpeed||null==a.baseSpeed||isNaN(Number(a.baseSpeed))||(d=a.baseSpeed);var e=Number(0);
void 0==a.baseGallop||null==a.baseGallop||isNaN(Number(a.baseGallop))||(e=a.baseGallop);var f=Number(0);void 0==a.baseStamina||null==a.baseStamina||isNaN(Number(a.baseStamina))||(f=a.baseStamina);a=createEmptyCamelProfile({baseAcc:c,baseSpeed:d,baseGallop:e,baseStamina:f});a.BaseAcc=c;a.BaseSpeed=d;a.BaseGallop=e;a.BaseStamina=f;a.CurrentAcc=c;a.CurrentSpeed=d;a.CurrentGallop=e;a.CurrentStamina=f;b.OwnedCamelsList=[];b.OwnedCamelsList.push(a);server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,
Data:{Camels:JSON.stringify(camelsJSON)}});return{Result:"OK",CamelProfile:a}};
handlers.selectCamel=function(a,b){b=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["Camels"]});if(void 0==b.Data.Camels||null==b.Data.Camels)return generateErrObj("Player's 'Camels' object was not found");b=JSON.parse(b.Data.Camels.Value);var c=b.OwnedCamelsList[a.camelIndex];if(void 0==c||null==c)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");var d=getServerTime();if(void 0==c.BreedingCompletionTimestamp||null==c.BreedingCompletionTimestamp||Number(c.BreedingCompletionTimestamp)>=
d)return generateFailObj("Camel cannot be selected: currently breeding");if(void 0==c.TrainingEnds||null==c.TrainingEnds||Number(c.TrainingEnds)>=d)return generateFailObj("Camel cannot be selected: currently training");b.SelectedCamel=a.camelIndex;server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{Camels:JSON.stringify(b)}});return{Result:"OK"}};handlers.sellCamel=function(a,b){};
handlers.takeSteroids=function(a,b){b=loadCamelsData();if(void 0==b||null==b)return generateErrObj("Player's 'Camels' object was not found");var c=b.OwnedCamelsList[a.camelIndex];if(void 0==c||null==c)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");if(Number(c.SteroidsLeft)>Number(0))return generateFailObj("Camel already on steroids");a=loadTitleDataJson("Balancing_Steroids");if(void 0==a||null==a)return generateErrObj("Steroids Balancing JSON undefined or null");var d=payCurrency(a.CostSC,
a.CostHC);if(null==d)return generateFailObj("Can't afford steroids");c.SteroidsLeft=a.EffectDuration;server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{Camels:JSON.stringify(b)}});return{Result:"OK",CamelData:c,VirtualCurrency:d}};
handlers.startTraining=function(a,b){b=loadCamelsData();if(void 0==b||null==b)return generateErrObj("Player's 'Camels' object was not found");var c=b.OwnedCamelsList[a.camelIndex];if(void 0==c||null==c)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");for(var d=getServerTime(),e=0;e<b.OwnedCamelsList.length;e++)if(Number(b.OwnedCamelsList[e].TrainingEnds)>d)return generateFailObj("A camel is already training");var f=e="";switch(a.statType){case "Acceleration":e="AccTrained";f=
"CurrentAcc";break;case "Speed":e="SpeedTrained";f="CurrentSpeed";break;case "Gallop":e="GallopTrained";f="CurrentGallop";break;case "Stamina":e="StaminaTrained",f="CurrentStamina"}var g=Number(c[e]),h=loadTitleDataJson("Balancing_Training");if(void 0==h||null==h)return generateErrObj("Training Balancing JSON undefined or null");if(void 0==h.TrainingLimits||null==h.TrainingLimits)return generateErrObj("Training Limits not defined");var k=Number(h.TrainingLimits[c.Quality]);if(void 0==k||null==k)return generateErrObj("Training limit for this quality not defined");
if(g>=k)return generateFailObj("Stat Training at max lvl");if(void 0==h.TrainingStages||null==h.TrainingStages||void 0==h.TrainingStages[g]||null==h.TrainingStages[g])return generateErrObj("Training values not found");h=h.TrainingStages[g];k=payCurrency(h.CostSC,h.CostHC);if(null==k)return generateFailObj("Can't afford training");c[e]=g+Number(1);c[f]=Number(c[f])+Number(h.StatGain);c.CurrentTrainingType=a.statType;c.TrainingEnds=d+Number(h.WaitTimeMins)*Number(60);server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,
Data:{Camels:JSON.stringify(b)}});return{Result:"OK",CamelData:c,VirtualCurrency:k}};
handlers.finishTraining=function(a,b){b=loadCamelsData();if(void 0==b||null==b)return generateErrObj("Player's 'Camels' object was not found");var c=b.OwnedCamelsList[a.camelIndex];if(void 0==c||null==c)return generateErrObj("Camel with index: "+a.camelIndex+" not found.");if("none"==c.CurrentTrainingType||isNaN(Number(c.TrainingEnds))||Number(0>=c.TrainingEnds||Number(c.TrainingEnds>getServerTime())))return generateFailObj("Camel cannot finish training");var d=loadTitleDataJson("Balancing_Training");
if(void 0==d||null==d)return generateErrObj("Training Balancing JSON undefined or null");if(void 0==d.QteBonuses||null==d.QteBonuses)return generateErrObj("Training Qte bonuses not defined or corrupt");var e=Number(0);0<d.QteBonuses.length&&d.QteBonuses.length<Number(a.qteOutcome)&&(e=Number(d.QteBonuses[Number(a.qteOutcome)]));var f="";switch(c.CurrentTrainingType){case "Acceleration":f="CurrentAcc";break;case "Speed":f="CurrentSpeed";break;case "Gallop":f="CurrentGallop";break;case "Stamina":f=
"CurrentStamina"}c[f]=Number(c[f])+e;c.TrainingEnds=0;c.CurrentTrainingType="none";server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{Camels:JSON.stringify(b)}});return{Result:"OK",BonusStat:Number(d.QteBonuses[a.qteOutcome])}};
handlers.upgradeCamelItem=function(a,b){b=loadCamelsData();if(void 0==b||null==b)return generateErrObj("Player's 'Camels' object was not found");var c=b.OwnedCamelsList[a.camelIndex];if(void 0==c||null==c)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");var d=Number(c[a.itemType]),e=loadTitleDataJson("Balancing_Upgrade");if(void 0==e||null==e)return generateErrObj("Upgrade Balancing JSON undefined or null");if(void 0==e.UpgradeLimits||null==e.UpgradeLimits)return generateErrObj("Upgrade Limits not defined");
var f=Number(e.UpgradeLimits[c.Quality]);if(void 0==f||null==f)return generateErrObj("Upgrade limit for this quality not defined");if(d>=f)return generateFailObj("Item at max lvl");if(void 0==e[a.itemType]||null==e[a.itemType]||void 0==e[a.itemType][d]||null==e[a.itemType][d])return generateErrObj("Upgrade values not found");f=e[a.itemType][d];e=payCurrency(f.CostSC,f.CostHC);if(null==e)return generateFailObj("Can't afford upgrade");c[a.itemType]=d+Number(1);a=f.StatBonuses.split(",");0<a.length&&
!isNaN(Number(a[0]))&&0<Number(a[0])&&(c.CurrentAcc+=Number(a[0]));1<a.length&&!isNaN(Number(a[1]))&&0<Number(a[1])&&(c.CurrentAcc+=Number(a[1]));2<a.length&&!isNaN(Number(a[2]))&&0<Number(a[2])&&(c.CurrentAcc+=Number(a[2]));3<a.length&&!isNaN(Number(a[3]))&&0<Number(a[3])&&(c.CurrentAcc+=Number(a[3]));server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{Camels:JSON.stringify(b.playerCamels)}});return{Result:"OK",CamelData:playerCamels,VirtualCurrency:e}};
handlers.grantOasis=function(a,b){a=loadTitleDataJson("Balancing_Oasis");if(void 0==a||null==a)return generateErrObj("Oasis Balancing JSON undefined or null");var c=getNextOasisTime(a.rechargeInterval);b=getServerTime();if(c>b)return generateFailObj("Oasis not ready yet",c);var c=randomRange(a.scRewardBase,2*a.scRewardBase),d=randomRange(a.hcRewardMin,a.hcRewardMax),e=randomRange(a.ticketsRewardMin,a.ticketsRewardMax);addCurrency("SC",c);addCurrency("HC",d);addCurrency("TK",e);server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,
Data:{lastClaimedOasisTimestamp:b}});c=server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency;return{Result:"OK",NextOasisTime:b+3600*Number(a.rechargeInterval),VirtualCurrency:c}};handlers.getOasisData=function(a,b){a=loadTitleDataJson("Balancing_Oasis");return void 0==a||null==a?generateErrObj("Oasis Balancing JSON undefined or null"):{Result:"OK",NextOasisTime:getNextOasisTime(a.rechargeInterval)}};
function getNextOasisTime(a){var b=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["lastClaimedOasisTimestamp"]}),c=0;void 0!=b.Data.lastClaimedOasisTimestamp&&void 0!=b.Data.lastClaimedOasisTimestamp.Value&&(c=Number(b.Data.lastClaimedOasisTimestamp.Value));return c+3600*Number(a)}
handlers.claimLevelUpReward=function(a,b){a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LevelProgress"]});if(void 0==a||null==a||void 0==a.Data.LevelProgress||null==a.Data.LevelProgress)return generateErrObj("LevelProgress object undefined or null");a=JSON.parse(a.Data.LevelProgress.Value);if(void 0==a||null==a)return generateErrObj("playerLevelProgressJSON undefined or null");if(Number(a.LastLevelReward)>=Number(a.Level))return generateFailObj("Player not eligible for level up reward");
b=loadTitleDataJson("Balancing_PlayerLevels");if(void 0==b||null==b||0==b.length)return generateFailObj("Failed to load level rewards data");b=b[Number(a.LastLevelReward)];addCurrency("SC",b.RewardSC);addCurrency("HC",b.RewardHC);addCurrency("TK",b.RewardTK);a.LastLevelReward=Number(a.LastLevelReward)+1;server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{LevelProgress:JSON.stringify(a)}});return{Result:"OK",VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.raceEnd=function(a,b){null!=a&&a.endRaceReward&&Number(a.endRaceReward)&&addCurrency("SC",Number(a.endRaceReward));return{Result:"OK"}};
handlers.endRace_quick=function(a,b){b=loadTitleDataJson("RaceRewards_Quick");if(void 0==b||null==b)return generateErrObj("RaceRewards_Quick JSON undefined or null");var c=Number(0);void 0!=b.ScBonusPerPlayerLevel&&null!=b.ScBonusPerPlayerLevel&&b.ScBonusPerPlayerLevel.length>a.finishPosition&&(c=Number(b.ScBonusPerPlayerLevel[a.finishPosition]));b=GiveRaceRewards(a,b,c);return null!=b?generateErrObj(b):{Result:"OK",CamelData:CamelFinishedRace(a,a.camelIndex),VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.endRace_event=function(a,b){b=loadTitleDataJson("RaceRewards_Events");if(void 0==b||null==b)return generateErrObj("RaceRewards_Events JSON undefined or null");b=b[a.seriesIndex];if(void 0==b||null==b)return generateErrObj("Series with index: "+a.seriesIndex+" not found");if(void 0==b.EventsList||null==b.EventsList)return generateErrObj("List of events not found for series with index: "+a.seriesIndex);var c=Number(0),d=Number(0),e=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["CurrentSeries",
"CurrentEvent"]});void 0==e.Data.CurrentSeries||null==e.Data.CurrentSeries||isNaN(e.Data.CurrentSeries.Value)||(c=Number(e.Data.CurrentSeries.Value));void 0==e.Data.CurrentEvent||null==e.Data.CurrentEvent||isNaN(e.Data.CurrentEvent.Value)||(d=Number(e.Data.CurrentEvent.Value));if(c!=a.seriesIndex||d!=a.eventIndex)return generateFailObj("Player is not eligible for this event");var f=GiveRaceRewards(a,b.EventsList[a.eventIndex]),e=null;if(null!=f)return generateErrObj(f);f=CamelFinishedRace(a,a.camelIndex);
0==a.finishPosition&&(a.eventIndex==b.EventsList.length?(c++,d=0):d++,e=addExperience(b.EventsList[a.eventIndex].ExpGain));server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{CurrentSeries:c,CurrentEvent:d}});return{Result:"OK",CamelData:f,VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency,CurrentSeries:c,CurrentEvent:d,LevelProgress:e}};
function GiveRaceRewards(a,b,c){var d=Number(0),e=Number(0),f=Number(0);if(void 0==b.Placement_SC||void 0==b.Placement_HC||void 0==b.Placement_TK)return"race rewards JSON is not valid";var g=b.Placement_SC[a.finishPosition];void 0==g||null==g||isNaN(Number(g))||(d+=Number(g));g=b.Placement_HC[a.finishPosition];void 0==g||null==g||isNaN(Number(g))||(e+=Number(g));g=b.Placement_TK[a.finishPosition];void 0==g||null==g||isNaN(Number(g))||(f+=Number(g));isNaN(Number(b.MaxStartBonus))||(d+=Number(b.MaxStartBonus));
isNaN(Number(a.finishSpeedFactor))||isNaN(Number(b.MaxFinishBonus))||(d+=Math.round(Number(b.MaxFinishBonus)*Number(a.finishSpeedFactor)));void 0==c||null==c||isNaN(Number(c))||(d+=Number(c));0<d&&addCurrency("SC",d);0<e&&addCurrency("HC",e);0<f&&addCurrency("TK",f);return null}
function CamelFinishedRace(a,b){a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["Camels"]});if(void 0!=a.Data.Camels&&null!=a.Data.Camels&&(a=JSON.parse(a.Data.Camels.Value),b=a.OwnedCamelsList[b],void 0!=b&&null!=b))return Number(b.SteroidsLeft)>Number(1)&&(b.SteroidsLeft=Number(b.SteroidsLeft)-Number(1)),server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{Camels:JSON.stringify(a)}}),b};
