function generateFailObj(a,b){return{Result:"Failed",Message:a,Data:b}}function generateErrObj(a,b){return{Result:"Error",Message:a,Data:b}}function loadTitleDataJson(a){var b=server.GetTitleData({PlayFabId:currentPlayerId,Keys:[a]});if(void 0==b||void 0==b.Data||void 0==b.Data[a])return null;a=JSON.parse(b.Data[a]);return void 0==a?null:a}function getServerTime(){return Math.floor((new Date).getTime()/1E3)}
function randomRange(a,b){return Math.round(Math.random()*(Number(b)-Number(a)))+Number(a)}function addCurrency(a,b){server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:b})}
handlers.breedCamel=function(a,b){var c=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["Camels","BreedingCandidates"]});if(void 0==c.Data.Camels||null==c.Data.Camels)return generateErrObj("Player's 'Camels' object was not found");b=JSON.parse(c.Data.Camels.Value);var e=b.OwnedCamelsList[a.camelIndex];if(void 0==e||null==e)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");if(b.OwnedCamelsList.count>=Number(loadTitleDataJson("MaxCamelSlots")))return generateFailObj("Number of owned camels reached max limit");
if(void 0==c.Data.BreedingCandidates||null==c.Data.BreedingCandidates)return generateErrObj("Player's breeding candidates not found");c=JSON.parse(c.Data.BreedingCandidates.Value);if(void 0==c||null==c||void 0==c.CandidateList||null==c.CandidateList||c.CandidateList.count<=Number(a.candidateIndex)||void 0==c.CandidateList[Number(a.candidateIndex)]||null==c.CandidateList[Number(a.candidateIndex)])return generateErrObj("Breeding candidate of index"+a.candidateIndex+" not found");a=c.CandidateList[Number(a.candidateIndex)];
if(0==a.Available)return generateFailObj("Selected cnadidate is not available");var d=server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency;if(a.CostSC>d.SC||a.CostHC>d.HC)return generateFailObj("Can't afford breeding");e={baseAcc:randomRange(e.CurrentAcc,a.Acceleration),baseSpeed:randomRange(e.CurrentSpeed,a.Speed),baseGallop:randomRange(e.CurrentGallop,a.Gallop),baseStamina:randomRange(e.CurrentStamina,a.Stamina)};e=createEmptyCamelProfile(e);e.BreedingCompletionTimestamp=getServerTime()+
3600*Number(a.WaitTimeHours);b.OwnedCamelsList.push(e);a.Available=!1;server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{Camels:JSON.stringify(b),BreedingCandidates:JSON.stringify(c)}});0<Number(a.CostSC)&&(server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:a.CostSC}),d.SC-=a.CostSC);0<Number(a.CostHC)&&(server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:a.CostHC}),d.HC-=a.CostHC);return{Result:"OK",NewCamelProfile:e,
VirtualCurrency:d}};
handlers.getBreedingCandidates=function(a,b){a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["BreedingCandidates"]});b={};void 0!=a.Data.BreedingCandidates&&null!=a.Data.BreedingCandidates&&(b=JSON.parse(a.Data.BreedingCandidates.Value));if(void 0==b||null==b||void 0==b.ExpirationTimestamp||null==b.ExpirationTimestamp||Number(b.ExpirationTimestamp)>=getServerTime())b=GenerateBreedingCandidates();return void 0==b||null==b?generateErrObj("Something went wrong"):{Result:"OK",BreedingCandidatesData:b}};
function GenerateBreedingCandidates(){var a=loadTitleDataJson("Balancing_Breeding");if(void 0==a||null==a||void 0==a.CandidatesResetTimeHours||null==a.CandidatesResetTimeHours||void 0==a.BreedingCandidates||null==a.BreedingCandidates||0==a.BreedingCandidates.length)return null;var b={};b.ExpirationTimestamp=getServerTime()+Number(a.CandidatesResetTimeHours)*Number(3600);b.CandidateList=[];for(var c=0;c<a.BreedingCandidates.length;c++){var e={Available:!0};e.Quality=a.BreedingCandidates[c].Quality;
e.CostSC=a.BreedingCandidates[c].CostSC;e.CostHC=a.BreedingCandidates[c].CostHC;for(var d=Number(0),f=Number(0),k=Number(0),g=Number(0),h=Number(a.BreedingCandidates[c].TotalStats),m=0;m<h;m++){var l=Math.random()*Number(4);l<Number(1)?d++:l<Number(2)?f++:l<Number(3)?k++:g++}e.Acceleration=d;e.Speed=f;e.Gallop=k;e.Stamina=g;e.WaitTimeHours=a.BreedingCandidates[c].WaitTimeHours;b.CandidateList.push(e)}server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{BreedingCandidates:JSON.stringify(b)}});
return b}
handlers.pickStartingCamel=function(a,b){var c=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["Camels"]});b=JSON.parse("{}");void 0!=c.Data.Camels&&null!=c.Data.Camels&&(b=JSON.parse(c.Data.Camels.Value));if(void 0!=b.OwnedCamelsList&&null!=b.OwnedCamelsList&&0<b.OwnedCamelsList.length&&(void 0!=b.OwnedCamelsList[0].name||null!=b[0].OwnedCamelsList.name))return generateFailObj("Player already owns a camel");b.SelectedCamel=0;c=Number(0);void 0==a.baseAcc||null==a.baseAcc||isNaN(Number(a.baseAcc))||(c=
a.baseAcc);var e=Number(0);void 0==a.baseSpeed||null==a.baseSpeed||isNaN(Number(a.baseSpeed))||(e=a.baseSpeed);var d=Number(0);void 0==a.baseGallop||null==a.baseGallop||isNaN(Number(a.baseGallop))||(d=a.baseGallop);var f=Number(0);void 0==a.baseStamina||null==a.baseStamina||isNaN(Number(a.baseStamina))||(f=a.baseStamina);a=createEmptyCamelProfile({baseAcc:c,baseSpeed:e,baseGallop:d,baseStamina:f});a.BaseAcc=c;a.BaseSpeed=e;a.BaseGallop=d;a.BaseStamina=f;a.CurrentAcc=c;a.CurrentSpeed=e;a.CurrentGallop=
d;a.CurrentStamina=f;b.OwnedCamelsList=[];b.OwnedCamelsList.push(a);server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{Camels:JSON.stringify(b)}});return{Result:"OK",CamelProfile:a}};
handlers.takeSteroids=function(a,b){b=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["Camels"]});if(void 0==b.Data.Camels||null==b.Data.Camels)return generateErrObj("Player's 'Camels' object was not found");b=JSON.parse(b.Data.Camels.Value);var c=b.OwnedCamelsList[a.camelIndex];if(void 0==c||null==c)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");if(Number(c.SteroidsLeft)>Number(0))return generateFailObj("Camel already on steroids");a=loadTitleDataJson("Balancing_Steroids");
if(void 0==a||null==a)return generateErrObj("Steroids Balancing JSON undefined or null");var e=server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency;if(a.CostSC>e.SC||a.CostHC>e.HC)return generateFailObj("Can't afford training");0<Number(a.CostSC)&&(server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:a.CostSC}),e.SC-=a.CostSC);0<Number(a.CostHC)&&(server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:a.CostHC}),
e.HC-=a.CostHC);c.SteroidsLeft=a.EffectDuration;server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{Camels:JSON.stringify(b)}});return{Result:"OK",CamelData:c,VirtualCurrency:e}};
handlers.trainCamel=function(a,b){b=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["Camels"]});if(void 0==b.Data.Camels||null==b.Data.Camels)return generateErrObj("Player's 'Camels' object was not found");b=JSON.parse(b.Data.Camels.Value);var c=b.OwnedCamelsList[a.camelIndex];if(void 0==c||null==c)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");for(var e=getServerTime(),d=0;d<b.OwnedCamelsList.length;d++)if(Number(b.OwnedCamelsList[d].TrainingEnds)>e)return generateFailObj("A camel is already training");
var f=d="";switch(a.statType){case "Acceleration":d="AccTrained";f="CurrentAcc";break;case "Speed":d="SpeedTrained";f="CurrentSpeed";break;case "Gallop":d="GallopTrained";f="CurrentGallop";break;case "Stamina":d="StaminaTrained",f="CurrentStamina"}var k=Number(c[d]),g=loadTitleDataJson("Balancing_Training");if(void 0==g||null==g)return generateErrObj("Training Balancing JSON undefined or null");if(void 0==g.TrainingLimits||null==g.TrainingLimits)return generateErrObj("Training Limits not defined");
var h=Number(g.TrainingLimits[c.Quality]);if(void 0==h||null==h)return generateErrObj("Training limit for this quality not defined");if(k>=h)return generateFailObj("Stat Training at max lvl");if(void 0==g.TrainingStages||null==g.TrainingStages||void 0==g.TrainingStages[k]||null==g.TrainingStages[k])return generateErrObj("Training values not found");g=g.TrainingStages[k];h=server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency;if(g.CostSC>h.SC||g.CostHC>h.HC)return generateFailObj("Can't afford training");
0<Number(g.CostSC)&&(server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:g.CostSC}),h.SC-=g.CostSC);0<Number(g.CostHC)&&(server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:g.CostHC}),h.HC-=g.CostHC);c[d]=k+Number(1);c[f]=Number(c[f])+Number(g.StatGain);c.CurrentTrainingType=a.statType;c.TrainingEnds=e+Number(g.WaitTimeMins)*Number(60);server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{Camels:JSON.stringify(b)}});
return{Result:"OK",CamelData:c,VirtualCurrency:h}};
handlers.upgradeCamelItem=function(a,b){b=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["Camels"]});if(void 0==b.Data.Camels||null==b.Data.Camels)return generateErrObj("Player's 'Camels' object was not found");b=JSON.parse(b.Data.Camels.Value);var c=b.OwnedCamelsList[a.camelIndex];if(void 0==c||null==c)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");var e=Number(c[a.itemType]),d=loadTitleDataJson("Balancing_Upgrade");if(void 0==d||null==d)return generateErrObj("Upgrade Balancing JSON undefined or null");
if(void 0==d.UpgradeLimits||null==d.UpgradeLimits)return generateErrObj("Upgrade Limits not defined");var f=Number(d.UpgradeLimits[c.Quality]);if(void 0==f||null==f)return generateErrObj("Upgrade limit for this quality not defined");if(e>=f)return generateFailObj("Item at max lvl");if(void 0==d[a.itemType]||null==d[a.itemType]||void 0==d[a.itemType][e]||null==d[a.itemType][e])return generateErrObj("Upgrade values not found");f=d[a.itemType][e];d=server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency;
if(f.CostSC>d.SC||f.CostHC>d.HC)return generateFailObj("Can't afford upgrade");0<Number(f.CostSC)&&(server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:f.CostSC}),d.SC-=f.CostSC);0<Number(f.CostHC)&&(server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:f.CostHC}),d.HC-=f.CostHC);c[a.itemType]=e+Number(1);a=f.StatBonuses.split(",");0<a.length&&!isNaN(Number(a[0]))&&0<Number(a[0])&&(c.CurrentAcc+=Number(a[0]));1<a.length&&!isNaN(Number(a[1]))&&
0<Number(a[1])&&(c.CurrentAcc+=Number(a[1]));2<a.length&&!isNaN(Number(a[2]))&&0<Number(a[2])&&(c.CurrentAcc+=Number(a[2]));3<a.length&&!isNaN(Number(a[3]))&&0<Number(a[3])&&(c.CurrentAcc+=Number(a[3]));server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{Camels:JSON.stringify(b)}});return{Result:"OK",CamelData:c,VirtualCurrency:d}};
function createEmptyCamelProfile(a){var b={Name:"CamelName",Quality:0,BaseAcc:0,BaseSpeed:0,BaseGallop:0,BaseStamina:0,CurrentAcc:0,CurrentSpeed:0,CurrentGallop:0,CurrentStamina:0,HeadGear:0,Robot:0,Whip:0,Robe:0,Bridle:0,SteroidsLeft:0,AccTrained:0,SpeedTrained:0,GallopTrained:0,StaminaTrained:0,CurrentTrainingType:"none",TrainingEnds:0,CamelValue:0,BreedingCompletionTimestamp:0};void 0!=a.baseAcc&&null!=a.baseAcc&&(b.BaseAcc=a.baseAcc,b.CurrentAcc=a.baseAcc);void 0!=a.baseSpeed&&null!=a.baseSpeed&&
(b.BaseSpeed=a.baseSpeed,b.CurrentSpeed=a.baseSpeed);void 0!=a.baseGallop&&null!=a.baseGallop&&(b.BaseGallop=a.baseGallop,b.CurrentGallop=a.baseGallop);void 0!=a.baseStamina&&null!=a.baseStamina&&(b.BaseStamina=a.baseStamina,b.CurrentStamina=a.baseStamina);return b}
handlers.grantOasis=function(a,b){a=loadTitleDataJson("Balancing_Oasis");if(void 0==a||null==a)return generateErrObj("Oasis Balancing JSON undefined or null");var c=getNextOasisTime(a.rechargeInterval);b=getServerTime();if(c>b)return generateFailObj("Oasis not ready yet",c);var c=randomRange(a.scRewardBase,2*a.scRewardBase),e=randomRange(a.hcRewardMin,a.hcRewardMax),d=randomRange(a.ticketsRewardMin,a.ticketsRewardMax);addCurrency("SC",c);addCurrency("HC",e);addCurrency("TK",d);server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,
Data:{lastClaimedOasisTimestamp:b}});c=server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency;return{Result:"OK",NextOasisTime:b+3600*Number(a.rechargeInterval),VirtualCurrency:c}};handlers.getOasisData=function(a,b){a=loadTitleDataJson("Balancing_Oasis");return void 0==a||null==a?generateErrObj("Oasis Balancing JSON undefined or null"):{Result:"OK",NextOasisTime:getNextOasisTime(a.rechargeInterval)}};
function getNextOasisTime(a){var b=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["lastClaimedOasisTimestamp"]}),c=0;void 0!=b.Data.lastClaimedOasisTimestamp&&void 0!=b.Data.lastClaimedOasisTimestamp.Value&&(c=Number(b.Data.lastClaimedOasisTimestamp.Value));return c+3600*Number(a)}handlers.raceEnd=function(a,b){null!=a&&a.endRaceReward&&Number(a.endRaceReward)&&addCurrency("SC",Number(a.endRaceReward));return{Result:"OK"}};
handlers.endRace_quick=function(a,b){b=loadTitleDataJson("RaceRewards_Quick");if(void 0==b||null==b)return generateErrObj("RaceRewards_Quick JSON undefined or null");b=GiveRaceRewards(a,b);if(null!=b)return generateErrObj(b);a=CamelFinishedRace(a,a.camelIndex);b=server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency;return{Result:"OK",CamelData:a,VirtualCurrency:b}};
handlers.endRace_event=function(a,b){b=loadTitleDataJson("RaceRewards_Events");if(void 0==b||null==b)return generateErrObj("RaceRewards_Events JSON undefined or null");b=b[a.seriesIndex];if(void 0==b||null==b)return generateErrObj("Series with index: "+a.seriesIndex+" not found");if(void 0==b.EventsList||null==b.EventsList)return generateErrObj("List of events not found for series with index: "+a.seriesIndex);var c=Number(0),e=Number(0),d=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["CurrentSeries",
"CurrentEvent"]});void 0==d.Data.CurrentSeries||null==d.Data.CurrentSeries||isNaN(d.Data.CurrentSeries.Value)||(c=Number(d.Data.CurrentSeries.Value));void 0==d.Data.CurrentEvent||null==d.Data.CurrentEvent||isNaN(d.Data.CurrentEvent.Value)||(e=Number(d.Data.CurrentEvent.Value));if(c!=a.seriesIndex||e!=a.eventIndex)return generateFailObj("Player is not eligible for this event");d=GiveRaceRewards(a,b.EventsList[a.eventIndex]);if(null!=d)return generateErrObj(d);d=CamelFinishedRace(a,a.camelIndex);0==
a.finishPosition&&(a.eventIndex==b.EventsList.length?(c++,e=0):e++);server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{CurrentSeries:c,CurrentEvent:e}});return{Result:"OK",CamelData:d,VirtualCurrency:userInventoryObject.VirtualCurrency,CurrentSeries:c,CurrentEvent:e}};
function GiveRaceRewards(a,b){var c=Number(0),e=Number(0),d=Number(0);if(void 0==b.Placement_SC||void 0==b.Placement_HC||void 0==b.Placement_TK)return"race rewards JSON is not valid";var f=b.Placement_SC[a.finishPosition];void 0==f||null==f||isNaN(Number(f))||(c+=Number(f));f=b.Placement_HC[a.finishPosition];void 0==f||null==f||isNaN(Number(f))||(e+=Number(f));f=b.Placement_TK[a.finishPosition];void 0==f||null==f||isNaN(Number(f))||(d+=Number(f));isNaN(Number(b.MaxStartBonus))||(c+=Number(b.MaxStartBonus));
isNaN(Number(a.finishSpeedFactor))||isNaN(Number(b.MaxFinishBonus))||(c+=Math.round(Number(b.MaxFinishBonus)*Number(a.finishSpeedFactor)));0<c&&addCurrency("SC",c);0<e&&addCurrency("HC",e);0<d&&addCurrency("TK",d);return null}
function CamelFinishedRace(a,b){a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["Camels"]});if(void 0!=a.Data.Camels&&null!=a.Data.Camels&&(a=JSON.parse(a.Data.Camels.Value),b=a.OwnedCamelsList[b],void 0!=b&&null!=b))return Number(b.SteroidsLeft)>Number(1)&&(b.SteroidsLeft=Number(b.SteroidsLeft)-Number(1)),server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{Camels:JSON.stringify(a)}}),b};
