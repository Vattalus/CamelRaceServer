function generateFailObj(a,b){return{Result:"Failed",Message:a,Data:b}}function generateErrObj(a,b){return{Result:"Error",Message:a,Data:b}}function loadTitleDataJson(a){var b=server.GetTitleData({PlayFabId:currentPlayerId,Keys:[a]});if(void 0==b||void 0==b.Data||void 0==b.Data[a])return null;a=JSON.parse(b.Data[a]);return void 0==a?null:a}function getServerTime(){return Math.floor((new Date).getTime()/1E3)}
function randomRange(a,b){return Math.round(Math.random()*(Number(b)-Number(a)))+Number(a)}function addCurrency(a,b){server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:b})}
function payCurrency(a,b,c){var d=server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency;if(void 0!=a&&null!=a&&a>d.SC||void 0!=b&&null!=b&&b>d.HC||void 0!=c&&null!=c&&c>d.TK)return null;void 0!=a&&null!=a&&0<Number(a)&&(server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:a}),d.SC-=a);void 0!=b&&null!=b&&0<Number(b)&&(server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:b}),d.HC-=b);void 0!=c&&null!=c&&0<Number(c)&&
(server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"TK",Amount:c}),d.HC-=c);return d}
function addExperience(a){var b=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LevelProgress"]}),c={};if(void 0!=b.Data.LevelProgress&&null!=b.Data.LevelProgress){if(c=JSON.parse(b.Data.LevelProgress.Value),void 0==c||null==c)return null}else c.Experience=0,c.Level=0,c.LastLevelReward=0;c.Experience=Number(c.Experience)+Number(a);a=loadTitleDataJson("Balancing_PlayerLevels");if(void 0==a||null==a||0==a.length)return null;for(var d=b=0;d<a.length&&!(b=d,c.Experience<Number(a[d].Threshold));d++);
c.Level=b;server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{LevelProgress:JSON.stringify(c)}});return c}function contains(a,b){for(var c=a.length;c--;)if(a[c]===b)return!0;return!1}function loadOwnedCamels(){var a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["OwnedCamels"]});if(void 0==a.Data.OwnedCamels||null==a.Data.OwnedCamels)return null;a=JSON.parse(a.Data.OwnedCamels.Value);return void 0==a||null==a?null:a}
function createEmptyCamelProfile(a){var b={Name:"CamelName",Quality:0,BaseAcc:0,BaseSpeed:0,BaseGallop:0,BaseStamina:0,Acceleration:0,Speed:0,Gallop:0,Stamina:0,HeadGear:0,Robot:0,Whip:0,Robe:0,Bridle:0,SteroidsLeft:0,TrainingLevels:{Acceleration:0,Speed:0,Gallop:0,Stamina:0},CurrentlyTrainingStat:"none",TrainingEnds:0,CamelValue:0,BreedingCompletionTimestamp:0,Customization:createEmptyCustomizationObject()};void 0!=a.BaseAcc&&null!=a.BaseAcc&&(b.BaseAcc=a.BaseAcc,b.Acceleration=a.BaseAcc);void 0!=
a.BaseSpeed&&null!=a.BaseSpeed&&(b.BaseSpeed=a.BaseSpeed,b.Speed=a.BaseSpeed);void 0!=a.BaseGallop&&null!=a.BaseGallop&&(b.BaseGallop=a.BaseGallop,b.Gallop=a.BaseGallop);void 0!=a.BaseStamina&&null!=a.BaseStamina&&(b.BaseStamina=a.BaseStamina,b.Stamina=a.BaseStamina);return b}function createEmptyCustomizationObject(){return{CamelModel:"Basic",CamelSeed:0,Saddle:"Basic",Robot:"Basic",Hat:"Basic",Shoes:"Basic"}}
function getNumberOfAvailableCamels(a){if(void 0==a||null==a||0>=Number(a.length))return 0;for(var b=getServerTime(),c=0,d=0;d<a.length;d++)Number(a[d].BreedingCompletionTimestamp)>b||0<Number(a[d].TrainingEnds)||c++;return c}
handlers.customizeCamel=function(a,b){b=loadOwnedCamels();if(void 0==b||null==b)return generateErrObj("Player's 'OwnedCamels' object was not found");var c=b[a.camelIndex];if(void 0==c||null==c)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");if(void 0==c.Customization||null==c.Customization)c.Customization=createEmptyCustomizationObject();log.debug({"customization object":createEmptyCustomizationObject()});var d=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:"OwnedCustomizationItems"});
if(void 0==d||null==d.Data)return generateErrObj("Error retrieving 'OwnedCustomizationItems'.");var e={};void 0!=d.Data.OwnedCustomizationItems&&null!=d.Data.OwnedCustomizationItems&&void 0!=JSON.parse(d.Data.OwnedCustomizationItems.Value)&&null!=JSON.parse(d.Data.OwnedCustomizationItems.Value)&&(e=JSON.parse(d.Data.OwnedCustomizationItems.Value));if(void 0==e[a.customizationCategory]||null==e[a.customizationCategory]||0==e[a.customizationCategory].length)e[a.customizationCategory]=["Basic"],server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,
Data:{OwnedCustomizationItems:JSON.stringify(e)}});if(1==contains(e[a.customizationCategory],a.itemId))return c.Customization[a.customizationCategory]=a.itemId,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCamels:JSON.stringify(b)}}),{Result:"OK",CamelData:c};d=server.GetCatalogItems({CatalogVersion:"Customization"+a.customizationCategory}).Catalog;if(void 0==d||null==d||0==d.length)return generateErrObj("Catalog version: Customization"+a.customizationCategory+" not found or empty");
for(var f={},g=0;g<d.length;g++)if(d[g].ItemId==a.itemId){f=d[g];break}if(null==f)return generateErrObj("Catalog item: "+a.itemId+" not found");d=payCurrency(f.VirtualCurrencyPrices.SC,f.VirtualCurrencyPrices.HC);if(null==d)return generateFailObj("Can't afford customization");e[a.customizationCategory].push(a.itemId);c.Customization[a.customizationCategory]=a.itemId;server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCustomizationItems:JSON.stringify(e),OwnedCamels:JSON.stringify(b)}});
return{Result:"OK",CamelData:c,OwnedCustomizationItems:e,VirtualCurrency:d}};
handlers.breedCamel=function(a,b){var c=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["OwnedCamels","BreedingCandidates"]});if(void 0==c.Data.OwnedCamels||null==c.Data.OwnedCamels)return generateErrObj("Player's 'OwnedCamels' object was not found");b=JSON.parse(c.Data.OwnedCamels.Value);var d=b[a.camelIndex];if(void 0==d||null==d)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");if(Number(b.length)>=Number(loadTitleDataJson("MaxCamelSlots")))return generateFailObj("Number of owned camels reached max limit");
if(void 0==c.Data.BreedingCandidates||null==c.Data.BreedingCandidates)return generateErrObj("Player's breeding candidates not found");c=JSON.parse(c.Data.BreedingCandidates.Value);if(void 0==c||null==c||void 0==c.CandidateList||null==c.CandidateList||c.CandidateList.length<=Number(a.candidateIndex)||void 0==c.CandidateList[Number(a.candidateIndex)]||null==c.CandidateList[Number(a.candidateIndex)])return generateErrObj("Breeding candidate of index"+a.candidateIndex+" not found");var e=c.CandidateList[Number(a.candidateIndex)];
if(0==e.Available)return generateFailObj("Selected candidate is not available");a=payCurrency(e.CostSC,e.CostHC);if(null==a)return generateFailObj("Can't afford breeding");var f=Number(0);null!=g&&void 0!=g.Level&&null!=g.Level&&(f=Number(g.Level));g={BaseAcc:randomRange(d.Acceleration,e.Acceleration)+f,BaseSpeed:randomRange(d.Speed,e.Speed)+f,BaseGallop:randomRange(d.Gallop,e.Gallop)+f,BaseStamina:randomRange(d.Stamina,e.Stamina)+f};f=createEmptyCamelProfile(g);f.Quality=Math.floor(Number(d.Quality)+
Number(e.Quality));f.BreedingCompletionTimestamp=getServerTime()+3600*Number(e.WaitTimeHours);b.push(f);e.Available=!1;server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCamels:JSON.stringify(b),BreedingCandidates:JSON.stringify(c)}});var g=null;b=loadTitleDataJson("Balancing_Breeding");void 0!=b&&null!=b&&void 0!=b.ExpGain&&null!=b.ExpGain&&b.ExpGain.length>f.Quality&&(g=addExperience(Number(b.ExpGain[f.Quality])));return{Result:"OK",NewCamelProfile:f,VirtualCurrency:a,LevelProgress:g}};
handlers.getBreedingCandidates=function(a,b){a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["BreedingCandidates"]});b={};void 0!=a.Data.BreedingCandidates&&null!=a.Data.BreedingCandidates&&(b=JSON.parse(a.Data.BreedingCandidates.Value));if(void 0==b||null==b||void 0==b.ExpirationTimestamp||null==b.ExpirationTimestamp||Number(b.ExpirationTimestamp)<=getServerTime())b=GenerateBreedingCandidates();return void 0==b||null==b?generateErrObj("Something went wrong"):{Result:"OK",BreedingCandidatesData:b}};
function GenerateBreedingCandidates(){var a=loadTitleDataJson("Balancing_Breeding");if(void 0==a||null==a||void 0==a.CandidatesResetTimeHours||null==a.CandidatesResetTimeHours||void 0==a.BreedingCandidates||null==a.BreedingCandidates||0==a.BreedingCandidates.length)return null;var b={};b.ExpirationTimestamp=getServerTime()+Number(a.CandidatesResetTimeHours)*Number(3600);b.CandidateList=[];for(var c=0;c<a.BreedingCandidates.length;c++){var d={Available:!0};d.Quality=a.BreedingCandidates[c].Quality;
d.CostSC=a.BreedingCandidates[c].CostSC;d.CostHC=a.BreedingCandidates[c].CostHC;for(var e=Number(0),f=Number(0),g=Number(0),k=Number(0),m=Number(a.BreedingCandidates[c].TotalStats),l=0;l<m;l++){var h=Math.random()*Number(4);h<Number(1)?e++:h<Number(2)?f++:h<Number(3)?g++:k++}d.Acceleration=e;d.Speed=f;d.Gallop=g;d.Stamina=k;d.WaitTimeHours=a.BreedingCandidates[c].WaitTimeHours;b.CandidateList.push(d)}server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{BreedingCandidates:JSON.stringify(b)}});
return b}
handlers.pickStartingCamel=function(a,b){b=loadOwnedCamels();null==b&&(b=[]);if(void 0!=b&&0<b.length&&(void 0!=b[0].name||null!=b[0].name))return generateFailObj("Player already owns a camel");b=Number(0);void 0==a.baseAcc||null==a.baseAcc||isNaN(Number(a.baseAcc))||(b=a.baseAcc);var c=Number(0);void 0==a.baseSpeed||null==a.baseSpeed||isNaN(Number(a.baseSpeed))||(c=a.baseSpeed);var d=Number(0);void 0==a.baseGallop||null==a.baseGallop||isNaN(Number(a.baseGallop))||(d=a.baseGallop);var e=Number(0);
void 0==a.baseStamina||null==a.baseStamina||isNaN(Number(a.baseStamina))||(e=a.baseStamina);a=createEmptyCamelProfile({baseAcc:b,baseSpeed:c,baseGallop:d,baseStamina:e});b=[];b.push(a);server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCamels:JSON.stringify(b)}});return{Result:"OK",CamelProfile:a}};handlers.sellCamel=function(a,b){};handlers.takeSteroids=function(a,b){};
handlers.startTraining=function(a,b){b=loadOwnedCamels();if(void 0==b||null==b)return generateErrObj("Player's 'OwnedCamels' object was not found");var c=b[a.camelIndex];if(void 0==c||null==c)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");var d=getServerTime();if(Number(c.BreedingCompletionTimestamp)>d)return generateFailObj("Selected camel is not fully grown yet");for(var e=0;e<b.length;e++)if(0<Number(b[e].TrainingEnds))return generateFailObj("A camel is already training");
e=getNumberOfAvailableCamels(b);if(void 0==e||null==e||isNaN(Number(e))||1>=Number(e))return generateFailObj("Cannot train last available camel");var e=Number(c.TrainingLevels[a.statType]),f=loadTitleDataJson("Balancing_Training");if(void 0==f||null==f)return generateErrObj("Training Balancing JSON undefined or null");if(void 0==f.TrainingLimits||null==f.TrainingLimits)return generateErrObj("Training Limits not defined");var g=Number(f.TrainingLimits[c.Quality]);if(void 0==g||null==g)return generateErrObj("Training limit for this quality not defined");
if(e>=g)return generateFailObj("Stat Training at max lvl");if(void 0==f.TrainingStages||null==f.TrainingStages||void 0==f.TrainingStages[e]||null==f.TrainingStages[e])return generateErrObj("Training values not found");f=f.TrainingStages[e];g=payCurrency(f.CostSC,f.CostHC);if(null==g)return generateFailObj("Can't afford training");c.TrainingLevels[a.statType]=e+Number(1);c[a.statType]=Number(c[a.statType])+Number(f.StatGain);c.CurrentlyTrainingStat=a.statType;c.TrainingEnds=d+Number(f.WaitTimeMins)*
Number(60);server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCamels:JSON.stringify(b)}});return{Result:"OK",CamelData:c,VirtualCurrency:g}};
handlers.finishTraining=function(a,b){b=loadOwnedCamels();if(void 0==b||null==b)return generateErrObj("Player's 'OwnedCamels' object was not found");var c=b[a.camelIndex];if(void 0==c||null==c)return generateErrObj("Camel with index: "+a.camelIndex+" not found.");if("none"==c.CurrentlyTrainingStat||isNaN(Number(c.TrainingEnds))||Number(0>=c.TrainingEnds||Number(c.TrainingEnds>getServerTime())))return generateFailObj("Camel cannot finish training");var d=loadTitleDataJson("Balancing_Training");if(void 0==
d||null==d)return generateErrObj("Training Balancing JSON undefined or null");if(void 0==d.QteBonuses||null==d.QteBonuses)return generateErrObj("Training Qte bonuses not defined or corrupt");var e=Number(0);0<d.QteBonuses.length&&d.QteBonuses.length>Number(a.qteOutcome)&&(e=Number(d.QteBonuses[Number(a.qteOutcome)]));c[c.CurrentlyTrainingStat]=Number(c[c.CurrentlyTrainingStat])+e;c.TrainingEnds=0;c.CurrentlyTrainingStat="none";server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCamels:JSON.stringify(b)}});
return{Result:"OK",BonusStat:e,CamelData:c}};
handlers.upgradeCamelItem=function(a,b){b=loadOwnedCamels();if(void 0==b||null==b)return generateErrObj("Player's 'OwnedCamels' object was not found");var c=b[a.camelIndex];if(void 0==c||null==c)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");var d=Number(c[a.itemType]),e=loadTitleDataJson("Balancing_Upgrade");if(void 0==e||null==e)return generateErrObj("Upgrade Balancing JSON undefined or null");if(void 0==e.UpgradeLimits||null==e.UpgradeLimits)return generateErrObj("Upgrade Limits not defined");
var f=Number(e.UpgradeLimits[c.Quality]);if(void 0==f||null==f)return generateErrObj("Upgrade limit for this quality not defined");if(d>=f)return generateFailObj("Item at max lvl");if(void 0==e[a.itemType]||null==e[a.itemType]||void 0==e[a.itemType][d]||null==e[a.itemType][d])return generateErrObj("Upgrade values not found");f=e[a.itemType][d];e=payCurrency(f.CostSC,f.CostHC);if(null==e)return generateFailObj("Can't afford upgrade");c[a.itemType]=d+Number(1);a=f.StatBonuses.split(",");0<a.length&&
!isNaN(Number(a[0]))&&0<Number(a[0])&&(c.Acceleration+=Number(a[0]));1<a.length&&!isNaN(Number(a[1]))&&0<Number(a[1])&&(c.Speed+=Number(a[1]));2<a.length&&!isNaN(Number(a[2]))&&0<Number(a[2])&&(c.Gallop+=Number(a[2]));3<a.length&&!isNaN(Number(a[3]))&&0<Number(a[3])&&(c.Stamina+=Number(a[3]));server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCamels:JSON.stringify(b)}});return{Result:"OK",CamelData:c,VirtualCurrency:e}};
handlers.grantOasis=function(a,b){a=loadTitleDataJson("Balancing_Oasis");if(void 0==a||null==a)return generateErrObj("Oasis Balancing JSON undefined or null");var c=getNextOasisTime(a.rechargeInterval);b=getServerTime();if(c>b)return generateFailObj("Oasis not ready yet",c);var c=randomRange(a.scRewardBase,2*a.scRewardBase),d=randomRange(a.hcRewardMin,a.hcRewardMax),e=randomRange(a.ticketsRewardMin,a.ticketsRewardMax);addCurrency("SC",c);addCurrency("HC",d);addCurrency("TK",e);server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,
Data:{lastClaimedOasisTimestamp:b}});c=server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency;return{Result:"OK",NextOasisTime:b+3600*Number(a.rechargeInterval),VirtualCurrency:c}};handlers.getOasisData=function(a,b){a=loadTitleDataJson("Balancing_Oasis");return void 0==a||null==a?generateErrObj("Oasis Balancing JSON undefined or null"):{Result:"OK",NextOasisTime:getNextOasisTime(a.rechargeInterval)}};
function getNextOasisTime(a){var b=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["lastClaimedOasisTimestamp"]}),c=0;void 0!=b.Data.lastClaimedOasisTimestamp&&void 0!=b.Data.lastClaimedOasisTimestamp.Value&&(c=Number(b.Data.lastClaimedOasisTimestamp.Value));return c+3600*Number(a)}
handlers.claimLevelUpReward=function(a,b){a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LevelProgress"]});if(void 0==a||null==a||void 0==a.Data.LevelProgress||null==a.Data.LevelProgress)return generateErrObj("LevelProgress object undefined or null");a=JSON.parse(a.Data.LevelProgress.Value);if(void 0==a||null==a)return generateErrObj("playerLevelProgressJSON undefined or null");if(Number(a.LastLevelReward)>=Number(a.Level))return generateFailObj("Player not eligible for level up reward");
b=loadTitleDataJson("Balancing_PlayerLevels");if(void 0==b||null==b||0==b.length)return generateFailObj("Failed to load level rewards data");b=b[Number(a.LastLevelReward)];addCurrency("SC",b.RewardSC);addCurrency("HC",b.RewardHC);addCurrency("TK",b.RewardTK);a.LastLevelReward=Number(a.LastLevelReward)+1;server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{LevelProgress:JSON.stringify(a)}});return{Result:"OK",VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.endRace_quick=function(a,b){b=loadTitleDataJson("RaceRewards_Quick");if(void 0==b||null==b)return generateErrObj("RaceRewards_Quick JSON undefined or null");var c=Number(0);void 0!=b.ScBonusPerPlayerLevel&&null!=b.ScBonusPerPlayerLevel&&b.ScBonusPerPlayerLevel.length>a.finishPosition&&(c=Number(b.ScBonusPerPlayerLevel[a.finishPosition]));b=GiveRaceRewards(a,b,c);return null!=b?generateErrObj(b):{Result:"OK",CamelData:CamelFinishedRace(a),VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.endRace_event=function(a,b){b=loadTitleDataJson("RaceRewards_Events");if(void 0==b||null==b)return generateErrObj("RaceRewards_Events JSON undefined or null");b=b[a.seriesIndex];if(void 0==b||null==b)return generateErrObj("Series with index: "+a.seriesIndex+" not found");if(void 0==b.EventsList||null==b.EventsList)return generateErrObj("List of events not found for series with index: "+a.seriesIndex);var c=Number(0),d=Number(0),e=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["CurrentSeries",
"CurrentEvent"]});void 0==e.Data.CurrentSeries||null==e.Data.CurrentSeries||isNaN(e.Data.CurrentSeries.Value)||(c=Number(e.Data.CurrentSeries.Value));void 0==e.Data.CurrentEvent||null==e.Data.CurrentEvent||isNaN(e.Data.CurrentEvent.Value)||(d=Number(e.Data.CurrentEvent.Value));if(c!=a.seriesIndex||d!=a.eventIndex)return generateFailObj("Player is not eligible for this event");var f=GiveRaceRewards(a,b.EventsList[a.eventIndex]),e=null;if(null!=f)return generateErrObj(f);f=CamelFinishedRace(a);0==a.finishPosition&&
(a.eventIndex==b.EventsList.length?(c++,d=0):d++,e=addExperience(b.EventsList[a.eventIndex].ExpGain));server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{CurrentSeries:c,CurrentEvent:d}});return{Result:"OK",CamelData:f,VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency,CurrentSeries:c,CurrentEvent:d,LevelProgress:e}};
function GiveRaceRewards(a,b,c){var d=Number(0),e=Number(0),f=Number(0);if(void 0==b.Placement_SC||void 0==b.Placement_HC||void 0==b.Placement_TK)return"race rewards JSON is not valid";var g=b.Placement_SC[a.finishPosition];void 0==g||null==g||isNaN(Number(g))||(d+=Number(g));g=b.Placement_HC[a.finishPosition];void 0==g||null==g||isNaN(Number(g))||(e+=Number(g));g=b.Placement_TK[a.finishPosition];void 0==g||null==g||isNaN(Number(g))||(f+=Number(g));isNaN(Number(b.MaxStartBonus))||(d+=Number(b.MaxStartBonus));
isNaN(Number(a.finishSpeedFactor))||isNaN(Number(b.MaxFinishBonus))||(d+=Math.round(Number(b.MaxFinishBonus)*Number(a.finishSpeedFactor)));void 0==c||null==c||isNaN(Number(c))||(d+=Number(c));0<d&&addCurrency("SC",d);0<e&&addCurrency("HC",e);0<f&&addCurrency("TK",f);return null}
function CamelFinishedRace(a){var b=loadOwnedCamels();if(void 0==b||null==b)return generateErrObj("Player's 'OwnedCamels' object was not found");a=b[a.camelIndex];if(void 0!=a&&null!=a)return Number(a.SteroidsLeft)>Number(1)&&(a.SteroidsLeft=Number(a.SteroidsLeft)-Number(1)),server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCamels:JSON.stringify(b)}}),a};
