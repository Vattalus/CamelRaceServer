function generateFailObj(a,b){return{Result:"Failed",Message:a,Data:b}}function generateErrObj(a,b){return{Result:"Error",Message:a,Data:b}}function loadTitleDataJson(a){var b=server.GetTitleData({PlayFabId:currentPlayerId,Keys:[a]});if(void 0==b||void 0==b.Data||void 0==b.Data[a])return null;a=JSON.parse(b.Data[a]);return void 0==a?null:a}
function loadTitleInternalDataJson(a){var b=server.GetTitleInternalData({PlayFabId:currentPlayerId,Keys:[a]});if(void 0==b||void 0==b.Data||void 0==b.Data[a])return null;a=JSON.parse(b.Data[a]);return void 0==a?null:a}function loadPlayerReadOnlyDataJson(a,b){if(void 0==b||null==b)b=currentPlayerId;b=server.GetUserReadOnlyData({PlayFabId:b,Keys:[a]});if(void 0==b||void 0==b.Data||void 0==b.Data[a]||void 0==b.Data[a].Value)return null;a=JSON.parse(b.Data[a].Value);return void 0==a?null:a}
function getServerTime(){return Math.floor((new Date).getTime()/1E3)}function randomRange(a,b){return Math.round(Math.random()*(Number(b)-Number(a)))+Number(a)}function addCurrency(a,b){if(Number(0>=b))return null;server.AddUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:a,Amount:b})}
function payCurrency(a,b,c){var e=server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency;if(void 0!=a&&null!=a&&a>e.SC||void 0!=b&&null!=b&&b>e.HC||void 0!=c&&null!=c&&c>e.TK)return null;void 0!=a&&null!=a&&0<Number(a)&&(server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"SC",Amount:a}),e.SC-=a);void 0!=b&&null!=b&&0<Number(b)&&(server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"HC",Amount:b}),e.HC-=b);void 0!=c&&null!=c&&0<Number(c)&&
(server.SubtractUserVirtualCurrency({PlayFabId:currentPlayerId,VirtualCurrency:"TK",Amount:c}),e.HC-=c);return e}
function addExperience(a){var b=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LevelProgress"]}),c={};if(void 0!=b.Data.LevelProgress&&null!=b.Data.LevelProgress){if(c=JSON.parse(b.Data.LevelProgress.Value),void 0==c||null==c)return null}else c.Experience=0,c.Level=0,c.LastLevelReward=0;c.Experience=Number(c.Experience)+Number(a);a=loadTitleDataJson("Balancing_PlayerLevels");if(void 0==a||null==a||0==a.length)return null;for(var e=b=0;e<a.length&&!(b=e,c.Experience<Number(a[e].Threshold));e++);
c.Level=b;server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{LevelProgress:JSON.stringify(c)}});return c}function contains(a,b){for(var c=a.length;c--;)if(a[c]===b)return!0;return!1}function shuffleArray(a){for(var b=a.length-1;0<b;b--){var c=Math.floor(Math.random()*(b+1)),e=a[b];a[b]=a[c];a[c]=e}}
function loadOwnedCamels(){var a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["OwnedCamels"]});if(void 0==a.Data.OwnedCamels||null==a.Data.OwnedCamels)return null;a=JSON.parse(a.Data.OwnedCamels.Value);return void 0==a||null==a?null:a}
function createEmptyCamelProfile(a){var b={Name:"CamelName",Number:"00",Quality:0,BaseAcc:0,BaseSpeed:0,BaseGallop:0,BaseStamina:0,Acceleration:0,Speed:0,Gallop:0,Stamina:0,HeadGear:0,Robot:0,Whip:0,Robe:0,Bridle:0,SteroidsLeft:0,TrainingLevels:{Acceleration:0,Speed:0,Gallop:0,Stamina:0},CurrentlyTrainingStat:"none",TrainingEnds:0,CamelValue:0,BreedingCompletionTimestamp:0,Customization:createEmptyCustomizationObject()};void 0!=a.BaseAcc&&null!=a.BaseAcc&&(b.BaseAcc=a.BaseAcc,b.Acceleration=a.BaseAcc);
void 0!=a.BaseSpeed&&null!=a.BaseSpeed&&(b.BaseSpeed=a.BaseSpeed,b.Speed=a.BaseSpeed);void 0!=a.BaseGallop&&null!=a.BaseGallop&&(b.BaseGallop=a.BaseGallop,b.Gallop=a.BaseGallop);void 0!=a.BaseStamina&&null!=a.BaseStamina&&(b.BaseStamina=a.BaseStamina,b.Stamina=a.BaseStamina);return b}function createEmptyCustomizationObject(){return{CamelModel:"Basic",CamelSeed:0,Saddle:"Basic",Robot:"Basic",Hat:"Basic",Shoes:"Basic"}}
function getNumberOfAvailableCamels(a){if(void 0==a||null==a||0>=Number(a.length))return 0;for(var b=getServerTime(),c=0,e=0;e<a.length;e++)Number(a[e].BreedingCompletionTimestamp)>b||0<Number(a[e].TrainingEnds)||c++;return c}
handlers.customizeCamel=function(a,b){b=loadOwnedCamels();if(void 0==b||null==b)return generateErrObj("Player's 'OwnedCamels' object was not found");var c=b[a.camelIndex];if(void 0==c||null==c)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");if(void 0==c.Customization||null==c.Customization)c.Customization=createEmptyCustomizationObject();var e=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:"OwnedCustomizationItems"});if(void 0==e||null==e.Data)return generateErrObj("Error retrieving 'OwnedCustomizationItems'.");
var d={};void 0!=e.Data.OwnedCustomizationItems&&null!=e.Data.OwnedCustomizationItems&&void 0!=JSON.parse(e.Data.OwnedCustomizationItems.Value)&&null!=JSON.parse(e.Data.OwnedCustomizationItems.Value)&&(d=JSON.parse(e.Data.OwnedCustomizationItems.Value));if(void 0==d[a.customizationCategory]||null==d[a.customizationCategory]||0==d[a.customizationCategory].length)d[a.customizationCategory]=["Basic"],server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCustomizationItems:JSON.stringify(d)}});
if(1==contains(d[a.customizationCategory],a.itemId))return c.Customization[a.customizationCategory]=a.itemId,server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCamels:JSON.stringify(b)}}),{Result:"OK",CamelData:c};e=server.GetCatalogItems({CatalogVersion:"Customization"+a.customizationCategory}).Catalog;if(void 0==e||null==e||0==e.length)return generateErrObj("Catalog version: Customization"+a.customizationCategory+" not found or empty");for(var f={},g=0;g<e.length;g++)if(e[g].ItemId==
a.itemId){f=e[g];break}if(null==f)return generateErrObj("Catalog item: "+a.itemId+" not found");e=payCurrency(f.VirtualCurrencyPrices.SC,f.VirtualCurrencyPrices.HC);if(null==e)return generateFailObj("Can't afford customization");d[a.customizationCategory].push(a.itemId);c.Customization[a.customizationCategory]=a.itemId;server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCustomizationItems:JSON.stringify(d),OwnedCamels:JSON.stringify(b)}});return{Result:"OK",CamelData:c,OwnedCustomizationItems:d,
VirtualCurrency:e}};
handlers.renameCamel=function(a,b){b=loadOwnedCamels();if(void 0==b||null==b)return generateErrObj("Player's 'OwnedCamels' object was not found");var c=b[a.camelIndex];if(void 0==c||null==c)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");void 0!=a.camelName&&null!=a.camelName&&a.camelName&&0!==a.camelName.length&&(c.Name=a.camelName);void 0!=a.camelNumber&&null!=a.camelNumber&&a.camelNumber&&2===a.camelNumber.length&&(c.Number=a.camelNumber);server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCamels:JSON.stringify(b)}});
return{Result:"OK"}};
handlers.breedCamel=function(a,b){var c=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["OwnedCamels","BreedingCandidates"]});if(void 0==c.Data.OwnedCamels||null==c.Data.OwnedCamels)return generateErrObj("Player's 'OwnedCamels' object was not found");b=JSON.parse(c.Data.OwnedCamels.Value);var e=b[a.camelIndex];if(void 0==e||null==e)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");if(Number(b.length)>=Number(loadTitleDataJson("MaxCamelSlots")))return generateFailObj("Number of owned camels reached max limit");if(void 0==
c.Data.BreedingCandidates||null==c.Data.BreedingCandidates)return generateErrObj("Player's breeding candidates not found");c=JSON.parse(c.Data.BreedingCandidates.Value);if(void 0==c||null==c||void 0==c.CandidateList||null==c.CandidateList||c.CandidateList.length<=Number(a.candidateIndex)||void 0==c.CandidateList[Number(a.candidateIndex)]||null==c.CandidateList[Number(a.candidateIndex)])return generateErrObj("Breeding candidate of index"+a.candidateIndex+" not found");var d=c.CandidateList[Number(a.candidateIndex)];
if(0==d.Available)return generateFailObj("Selected candidate is not available");a=payCurrency(d.CostSC,d.CostHC);if(null==a)return generateFailObj("Can't afford breeding");var f=Number(0);null!=g&&void 0!=g.Level&&null!=g.Level&&(f=Number(g.Level));g={BaseAcc:randomRange(e.Acceleration,d.Acceleration)+f,BaseSpeed:randomRange(e.Speed,d.Speed)+f,BaseGallop:randomRange(e.Gallop,d.Gallop)+f,BaseStamina:randomRange(e.Stamina,d.Stamina)+f};f=createEmptyCamelProfile(g);f.Quality=Math.floor(Number(e.Quality)+
Number(d.Quality));f.BreedingCompletionTimestamp=getServerTime()+3600*Number(d.WaitTimeHours);b.push(f);d.Available=!1;server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCamels:JSON.stringify(b),BreedingCandidates:JSON.stringify(c)}});var g=null;b=loadTitleDataJson("Balancing_Breeding");void 0!=b&&null!=b&&void 0!=b.ExpGain&&null!=b.ExpGain&&b.ExpGain.length>f.Quality&&(g=addExperience(Number(b.ExpGain[f.Quality])));return{Result:"OK",NewCamelProfile:f,VirtualCurrency:a,LevelProgress:g}};
handlers.getBreedingCandidates=function(a,b){a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["BreedingCandidates"]});b={};void 0!=a.Data.BreedingCandidates&&null!=a.Data.BreedingCandidates&&(b=JSON.parse(a.Data.BreedingCandidates.Value));if(void 0==b||null==b||void 0==b.ExpirationTimestamp||null==b.ExpirationTimestamp||Number(b.ExpirationTimestamp)<=getServerTime())b=GenerateBreedingCandidates();return void 0==b||null==b?generateErrObj("Something went wrong"):{Result:"OK",BreedingCandidatesData:b}};
function GenerateBreedingCandidates(){var a=loadTitleDataJson("Balancing_Breeding");if(void 0==a||null==a||void 0==a.CandidatesResetTimeHours||null==a.CandidatesResetTimeHours||void 0==a.BreedingCandidates||null==a.BreedingCandidates||0==a.BreedingCandidates.length)return null;var b={};b.ExpirationTimestamp=getServerTime()+Number(a.CandidatesResetTimeHours)*Number(3600);b.CandidateList=[];for(var c=0;c<a.BreedingCandidates.length;c++){var e={Available:!0};e.Quality=a.BreedingCandidates[c].Quality;
e.CostSC=a.BreedingCandidates[c].CostSC;e.CostHC=a.BreedingCandidates[c].CostHC;for(var d=Number(0),f=Number(0),g=Number(0),h=Number(0),m=Number(a.BreedingCandidates[c].TotalStats),l=0;l<m;l++){var k=Math.random()*Number(4);k<Number(1)?d++:k<Number(2)?f++:k<Number(3)?g++:h++}e.Acceleration=d;e.Speed=f;e.Gallop=g;e.Stamina=h;e.WaitTimeHours=a.BreedingCandidates[c].WaitTimeHours;b.CandidateList.push(e)}server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{BreedingCandidates:JSON.stringify(b)}});
return b}
handlers.pickStartingCamel=function(a,b){b=loadOwnedCamels();null==b&&(b=[]);if(void 0!=b&&0<b.length&&(void 0!=b[0].name||null!=b[0].name))return generateFailObj("Player already owns a camel");b=Number(0);void 0==a.BaseAcc||null==a.BaseAcc||isNaN(Number(a.BaseAcc))||(b=a.BaseAcc);var c=Number(0);void 0==a.BaseSpeed||null==a.BaseSpeed||isNaN(Number(a.BaseSpeed))||(c=a.BaseSpeed);var e=Number(0);void 0==a.BaseGallop||null==a.BaseGallop||isNaN(Number(a.BaseGallop))||(e=a.BaseGallop);var d=Number(0);
void 0==a.BaseStamina||null==a.BaseStamina||isNaN(Number(a.BaseStamina))||(d=a.BaseStamina);a=createEmptyCamelProfile({BaseAcc:b,BaseSpeed:c,BaseGallop:e,BaseStamina:d});b=[];b.push(a);server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCamels:JSON.stringify(b)}});return{Result:"OK",CamelProfile:a}};handlers.sellCamel=function(a,b){};handlers.takeSteroids=function(a,b){};
handlers.startTraining=function(a,b){b=loadOwnedCamels();if(void 0==b||null==b)return generateErrObj("Player's 'OwnedCamels' object was not found");var c=b[a.camelIndex];if(void 0==c||null==c)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");var e=getServerTime();if(Number(c.BreedingCompletionTimestamp)>e)return generateFailObj("Selected camel is not fully grown yet");for(var d=0;d<b.length;d++)if(0<Number(b[d].TrainingEnds))return generateFailObj("A camel is already training");
d=getNumberOfAvailableCamels(b);if(void 0==d||null==d||isNaN(Number(d))||1>=Number(d))return generateFailObj("Cannot train last available camel");var d=Number(c.TrainingLevels[a.statType]),f=loadTitleDataJson("Balancing_Training");if(void 0==f||null==f)return generateErrObj("Training Balancing JSON undefined or null");if(void 0==f.TrainingLimits||null==f.TrainingLimits)return generateErrObj("Training Limits not defined");var g=Number(f.TrainingLimits[c.Quality]);if(void 0==g||null==g)return generateErrObj("Training limit for this quality not defined");
if(d>=g)return generateFailObj("Stat Training at max lvl");if(void 0==f.TrainingStages||null==f.TrainingStages||void 0==f.TrainingStages[d]||null==f.TrainingStages[d])return generateErrObj("Training values not found");f=f.TrainingStages[d];g=payCurrency(f.CostSC,f.CostHC);if(null==g)return generateFailObj("Can't afford training");c.TrainingLevels[a.statType]=d+Number(1);c[a.statType]=Number(c[a.statType])+Number(f.StatGain);c.CurrentlyTrainingStat=a.statType;c.TrainingEnds=e+Number(f.WaitTimeMins)*
Number(60);server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCamels:JSON.stringify(b)}});return{Result:"OK",CamelData:c,VirtualCurrency:g}};
handlers.finishTraining=function(a,b){b=loadOwnedCamels();if(void 0==b||null==b)return generateErrObj("Player's 'OwnedCamels' object was not found");var c=b[a.camelIndex];if(void 0==c||null==c)return generateErrObj("Camel with index: "+a.camelIndex+" not found.");if("none"==c.CurrentlyTrainingStat||isNaN(Number(c.TrainingEnds))||Number(0>=c.TrainingEnds||Number(c.TrainingEnds>getServerTime())))return generateFailObj("Camel cannot finish training");var e=loadTitleDataJson("Balancing_Training");if(void 0==
e||null==e)return generateErrObj("Training Balancing JSON undefined or null");if(void 0==e.QteBonuses||null==e.QteBonuses)return generateErrObj("Training Qte bonuses not defined or corrupt");var d=Number(0);0<e.QteBonuses.length&&e.QteBonuses.length>Number(a.qteOutcome)&&(d=Number(e.QteBonuses[Number(a.qteOutcome)]));c[c.CurrentlyTrainingStat]=Number(c[c.CurrentlyTrainingStat])+d;c.TrainingEnds=0;c.CurrentlyTrainingStat="none";server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCamels:JSON.stringify(b)}});
return{Result:"OK",BonusStat:d,CamelData:c}};
handlers.upgradeCamelItem=function(a,b){b=loadOwnedCamels();if(void 0==b||null==b)return generateErrObj("Player's 'OwnedCamels' object was not found");var c=b[a.camelIndex];if(void 0==c||null==c)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");var e=Number(c[a.itemType]),d=loadTitleDataJson("Balancing_Upgrade");if(void 0==d||null==d)return generateErrObj("Upgrade Balancing JSON undefined or null");if(void 0==d.UpgradeLimits||null==d.UpgradeLimits)return generateErrObj("Upgrade Limits not defined");
var f=Number(d.UpgradeLimits[c.Quality]);if(void 0==f||null==f)return generateErrObj("Upgrade limit for this quality not defined");if(e>=f)return generateFailObj("Item at max lvl");if(void 0==d[a.itemType]||null==d[a.itemType]||void 0==d[a.itemType][e]||null==d[a.itemType][e])return generateErrObj("Upgrade values not found");f=d[a.itemType][e];d=payCurrency(f.CostSC,f.CostHC);if(null==d)return generateFailObj("Can't afford upgrade");c[a.itemType]=e+Number(1);a=f.StatBonuses.split(",");0<a.length&&
!isNaN(Number(a[0]))&&0<Number(a[0])&&(c.Acceleration+=Number(a[0]));1<a.length&&!isNaN(Number(a[1]))&&0<Number(a[1])&&(c.Speed+=Number(a[1]));2<a.length&&!isNaN(Number(a[2]))&&0<Number(a[2])&&(c.Gallop+=Number(a[2]));3<a.length&&!isNaN(Number(a[3]))&&0<Number(a[3])&&(c.Stamina+=Number(a[3]));server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCamels:JSON.stringify(b)}});return{Result:"OK",CamelData:c,VirtualCurrency:d}};
handlers.grantOasis=function(a,b){a=loadTitleDataJson("Balancing_Oasis");if(void 0==a||null==a)return generateErrObj("Oasis Balancing JSON undefined or null");var c=getNextOasisTime(a.rechargeInterval);b=getServerTime();if(c>b)return generateFailObj("Oasis not ready yet",c);var c=randomRange(a.scRewardBase,2*a.scRewardBase),e=randomRange(a.hcRewardMin,a.hcRewardMax),d=randomRange(a.ticketsRewardMin,a.ticketsRewardMax);addCurrency("SC",c);addCurrency("HC",e);addCurrency("TK",d);server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,
Data:{lastClaimedOasisTimestamp:b}});c=server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency;return{Result:"OK",NextOasisTime:b+3600*Number(a.rechargeInterval),VirtualCurrency:c}};handlers.getOasisData=function(a,b){a=loadTitleDataJson("Balancing_Oasis");return void 0==a||null==a?generateErrObj("Oasis Balancing JSON undefined or null"):{Result:"OK",NextOasisTime:getNextOasisTime(a.rechargeInterval)}};
function getNextOasisTime(a){var b=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["lastClaimedOasisTimestamp"]}),c=0;void 0!=b.Data.lastClaimedOasisTimestamp&&void 0!=b.Data.lastClaimedOasisTimestamp.Value&&(c=Number(b.Data.lastClaimedOasisTimestamp.Value));return c+3600*Number(a)}
handlers.claimLevelUpReward=function(a,b){a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["LevelProgress"]});if(void 0==a||null==a||void 0==a.Data.LevelProgress||null==a.Data.LevelProgress)return generateErrObj("LevelProgress object undefined or null");a=JSON.parse(a.Data.LevelProgress.Value);if(void 0==a||null==a)return generateErrObj("playerLevelProgressJSON undefined or null");if(Number(a.LastLevelReward)>=Number(a.Level))return generateFailObj("Player not eligible for level up reward");
b=loadTitleDataJson("Balancing_PlayerLevels");if(void 0==b||null==b||0==b.length)return generateFailObj("Failed to load level rewards data");b=b[Number(a.LastLevelReward)];addCurrency("SC",b.RewardSC);addCurrency("HC",b.RewardHC);addCurrency("TK",b.RewardTK);a.LastLevelReward=Number(a.LastLevelReward)+1;server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{LevelProgress:JSON.stringify(a)}});return{Result:"OK",VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.endRace_quick=function(a,b){b=loadTitleDataJson("RaceRewards_Quick");if(void 0==b||null==b)return generateErrObj("RaceRewards_Quick JSON undefined or null");var c=Number(0);void 0!=b.ScBonusPerPlayerLevel&&null!=b.ScBonusPerPlayerLevel&&b.ScBonusPerPlayerLevel.length>a.finishPosition&&(c=Number(b.ScBonusPerPlayerLevel[a.finishPosition]));b=GiveRaceRewards(a,b,c);return void 0==b||null==b||null!=b.ErrorMessage?generateErrObj(b.ErrorMessage):{Result:"OK",CamelData:CamelFinishedRace(a),VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
handlers.endRace_event=function(a,b){b=loadTitleDataJson("RaceRewards_Events");if(void 0==b||null==b)return generateErrObj("RaceRewards_Events JSON undefined or null");b=b[a.seriesIndex];if(void 0==b||null==b)return generateErrObj("Series with index: "+a.seriesIndex+" not found");if(void 0==b.EventsList||null==b.EventsList)return generateErrObj("List of events not found for series with index: "+a.seriesIndex);var c=Number(0),e=Number(0),d=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["CurrentSeries",
"CurrentEvent"]});void 0==d.Data.CurrentSeries||null==d.Data.CurrentSeries||isNaN(d.Data.CurrentSeries.Value)||(c=Number(d.Data.CurrentSeries.Value));void 0==d.Data.CurrentEvent||null==d.Data.CurrentEvent||isNaN(d.Data.CurrentEvent.Value)||(e=Number(d.Data.CurrentEvent.Value));if(Number(a.seriesIndex)==c&&Number(a.eventIndex)==e&&(d=GiveRaceRewards(a,b.EventsList[a.eventIndex]),void 0==d||null==d||null!=d.ErrorMessage))return generateErrObj(d.ErrorMessage);var d=null,f=CamelFinishedRace(a);0==a.finishPosition&&
(a.eventIndex==b.EventsList.length?(c++,e=0):e++,d=addExperience(b.EventsList[a.eventIndex].ExpGain));server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{CurrentSeries:c,CurrentEvent:e}});return{Result:"OK",CamelData:f,VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency,CurrentSeries:c,CurrentEvent:e,LevelProgress:d}};
handlers.endRace_tournament=function(a,b){var c=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["CurrentTournament","LevelProgress","OwnedCamels"]});b=GetCurrentTournament(c);if(void 0==b||null==b)return generateErrObj("error getting player tournamend data");var e="Recordings_"+b,d=["RaceRewards_Tournament","DummyPlayer",e],f=server.GetTitleData({PlayFabId:currentPlayerId,Keys:d});log.debug("tDataKeys: "+d);if(void 0==f||void 0==f.Data)return generateErrObj("tdata undefined or null");
d=JSON.parse(f.Data.RaceRewards_Tournament);if(void 0==d||null==d)return generateErrObj("RaceRewards_Tournament JSON undefined or null");d=GiveRaceRewards(a,d);if(void 0==d||null==d||null!=d.ErrorMessage)return generateErrObj(d.ErrorMessage);server.UpdatePlayerStatistics({PlayFabId:currentPlayerId,Statistics:[{StatisticName:b,Value:d.RewardsReceived.SC}]});if(void 0==c.Data.OwnedCamels||null==c.Data.OwnedCamels)return null;c=JSON.parse(c.Data.OwnedCamels.Value);c=CamelFinishedRace(a,c);SaveTournamentRecording(a.startQteOutcome,
a.raceRecording,c);log.debug("player list data: "+f.Data.playerListKey);a=JSON.parse(f.Data.playerListKey);if(void 0==a||null==a)return generateErrObj("Error loading list of players");0>a.indexOf(currentPlayerId)&&(a.push(currentPlayerId),400<a.length&&a.splice(0,1),server.SetTitleData({Key:e,Value:JSON.stringify(a)}));return{Result:"OK",CamelData:c,VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency,TournamentLeaderboard:LoadTournamentLeaderboard(b,f.Data.DummyPlayer)}};
function GiveRaceRewards(a,b,c){var e={RewardsReceived:{SC:0,HC:0,TK:0},ErrorMessage:null},d=Number(0),f=Number(0),g=Number(0);if(void 0!=b.Placement_SC){var h=b.Placement_SC[a.finishPosition];void 0==h||null==h||isNaN(Number(h))||(d+=Number(h))}void 0!=b.Placement_HC&&(h=b.Placement_HC[a.finishPosition],void 0==h||null==h||isNaN(Number(h))||(f+=Number(h)));void 0!=b.Placement_TK&&(h=b.Placement_TK[a.finishPosition],void 0==h||null==h||isNaN(Number(h))||(g+=Number(h)));isNaN(Number(b.MaxStartBonus))||
(d+=Number(b.MaxStartBonus));isNaN(Number(a.finishSpeedFactor))||isNaN(Number(b.MaxFinishBonus))||(d+=Math.round(Number(b.MaxFinishBonus)*Number(a.finishSpeedFactor)));void 0==c||null==c||isNaN(Number(c))||(d+=Number(c));0<d&&addCurrency("SC",d);0<f&&addCurrency("HC",f);0<g&&addCurrency("TK",g);e.RewardsReceived.SC=d;e.RewardsReceived.HC=f;e.RewardsReceived.TK=g;return e}
function CamelFinishedRace(a,b){if(void 0==b||null==b)b=loadOwnedCamels();if(void 0==b||null==b)return generateErrObj("Player's 'OwnedCamels' object was not found");a=b[a.camelIndex];if(void 0!=a&&null!=a)return server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCamels:JSON.stringify(b)}}),a}
handlers.startRace=function(a,b){b=loadOwnedCamels();if(void 0==b||null==b)return generateErrObj("Player's 'OwnedCamels' object was not found");var c=b[a.camelIndex];if(void 0==c||null==c)return generateErrObj("Camel with index: "+a.camelIndex+"not found.");Number(c.SteroidsLeft)>Number(1)&&(c.SteroidsLeft=Number(c.SteroidsLeft)-Number(1));server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{OwnedCamels:JSON.stringify(b)}});b=null;if("Tournament"==a.raceType){if(null==payCurrency(0,0,1))return generateFailObj("Not enough tickets");
b=GetListOfOpponentRecordings(3)}return{Result:"OK",OpponentData:JSON.stringify(b)}};
function GetCurrentTournament(a){var b=null;if(void 0==a||null==a)a=server.GetUserReadOnlyData({PlayFabId:currentPlayerId,Keys:["CurrentTournament","LevelProgress"]});void 0!=a&&void 0!=a.Data&&void 0!=a.Data.CurrentTournament&&(b=a.Data.CurrentTournament.Value);if(void 0==b||null==b)playerLevelProgress=a.Data.LevelProgress,void 0!=playerLevelProgress&&null!=playerLevelProgress&&(a=JSON.parse(playerLevelProgress.Data.LevelProgress.Value),void 0==a||null==a||isNaN(Number(a.Level))),b="TournamentBronze",
server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{CurrentTournament:b}});return b}function SaveTournamentRecording(a,b,c){server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{LastTournamentRaceRecording:JSON.stringify({camelName:c.Name,camelAcceleration:c.Acceleration,camelSpeed:c.Speed,camelGallop:c.Gallop,camelCustomization:c.Customization,startQteOutcome:Number(a),camelActions:b})}})}
function GetListOfOpponentRecordings(a){var b=GetCurrentTournament(),b=loadTitleDataJson("Recordings_"+b);if(void 0==b||null==b||0>=b.count)return null;shuffleArray(b);for(var c=0,e=0,d=[];c<a&&!(e>=b.length);){if(b[e]!=currentPlayerId){var f=loadPlayerReadOnlyDataJson("LastTournamentRaceRecording",b[e]);void 0!=f&&null!=f&&(d.push(f),c++)}e++}return d}
function GetDummyCharacterId(){var a=server.GetTitleData({PlayFabId:currentPlayerId,Keys:["DummyPlayer"]});return void 0==a||void 0==a.Data?null:a.Data.DummyPlayer}
handlers.endTournamentPlayer=function(a,b){a=GetPlayerLeaderboardPercentagePosition();if(void 0==a||null==a)return null;var c=loadTitleDataJson("Balancing_TournamentEndRewards");if(void 0==c||null==c||0>=c.length)return null;b=null;for(var e=0;e<c.length;e++)if(a.TopPercent<=Number(c[e].TopPercent)){b=c[e];break}if(null==b)return null;c={};c.PlayerLeaderboardPosition=a.Position;c.PlayerLeaderboardPercentagePosition=a.TopPercent;c.RewardSC=b.RewardSC;c.RewardHC=b.RewardHC;server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,
Data:{LastTournamentRewards:JSON.stringify(c),CurrentTournament:null,LastTournamentRaceRecording:null}})};
function GetPlayerLeaderboardPercentagePosition(a,b){if(void 0==a||null==a)a=GetCurrentTournament();var c=server.GetLeaderboardAroundUser({StatisticName:a,PlayFabId:currentPlayerId,MaxResultsCount:1}),e=0,d=-1;void 0!=c&&void 0!=c.Leaderboard&&0<c.Leaderboard.length&&(e=Number(c.Leaderboard[0].StatValue),d=Number(c.Leaderboard[0].Position));if(void 0==b||null==b)b=GetDummyCharacterId();void 0!=b&&null!=b&&(c=server.GetLeaderboardAroundUser({StatisticName:a,PlayFabId:b,MaxResultsCount:1}));b=-1;void 0!=
c&&void 0!=c.Leaderboard&&0<c.Leaderboard.length&&(b=Number(c.Leaderboard[0].Position));return 0>d||0>b?null:{StatName:a,StatValue:e,Position:d,TopPercent:d/b*100}}
handlers.endTournamentTitle=function(a,b){a=GetDummyCharacterId();void 0!=a&&null!=a&&server.UpdatePlayerStatistics({PlayFabId:a,Statistics:[{StatisticName:"TournamentBronze",Value:1},{StatisticName:"TournamentSilver",Value:1},{StatisticName:"TournamentGold",Value:1},{StatisticName:"TournamentPlatinum",Value:1},{StatisticName:"TournamentDiamond",Value:1}]});server.SetTitleData({Key:"Recordings_TournamentBronze",Value:"[]"});server.SetTitleData({Key:"Recordings_TournamentSilver",Value:"[]"});server.SetTitleData({Key:"Recordings_TournamentGold",
Value:"[]"});server.SetTitleData({Key:"Recordings_TournamentPlatinum",Value:"[]"});server.SetTitleData({Key:"Recordings_TournamentDiamond",Value:"[]"});server.SetTitleData({Key:"NextTournamentStart",Value:getServerTime()+300})};
handlers.claimTournamentEndRewards=function(a,b){a=loadPlayerReadOnlyDataJson("LastTournamentRewards");if(void 0==a||null==a)return generateErrObj("LastTournamentRewards object not found");addCurrency("SC",a.RewardSC);addCurrency("HC",a.RewardHC);server.UpdateUserReadOnlyData({PlayFabId:currentPlayerId,Data:{LastTournamentRewards:null}});return{Result:"OK",VirtualCurrency:server.GetUserInventory({PlayFabId:currentPlayerId}).VirtualCurrency}};
function LoadTournamentLeaderboard(a,b){a=GetPlayerLeaderboardPercentagePosition(a,b);if(void 0==a||null==a)return generateErrObj("Couldnt get current tournament leaderboard position");var c=server.GetLeaderboard({StatisticName:a.StatName,StartPosition:0,MaxResultsCount:100}),e=[];if(void 0!=c&&void 0!=c.Leaderboard&&0<c.Leaderboard.length)for(var d=0;d<c.Leaderboard.length;d++)c.Leaderboard[d].PlayFabId!=b&&e.push({PlayFabId:c.Leaderboard[d].PlayFabId,DisplayName:c.Leaderboard[d].DisplayName,StatValue:c.Leaderboard[d].StatValue,
Position:c.Leaderboard[d].Position});return{Result:"OK",CurrentTournament:a.StatName,PlayerScore:a.StatValue,PlayerPosition:a.Position,PlayerPositionPercentage:a.TopPercent,LeaderboardEntries:e}}handlers.RetrieveTournamentLeaderboard=function(a,b){return LoadTournamentLeaderboard(GetCurrentTournament(),GetDummyCharacterId())};
